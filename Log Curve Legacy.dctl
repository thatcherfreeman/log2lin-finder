DEFINE_UI_PARAMS(x_shift, X Shift, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(y_shift, Y Shift, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(scale, Scale, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(slope, Slope, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(intercept, Intercept, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(cut, Cut, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(gain, Linear Gain, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(direction, Direction, DCTLUI_COMBO_BOX, 0, {LOG2LIN, LIN2LOG}, {Log to Lin, Lin to Log})

typedef struct {
    float x_shift, y_shift, scale, slope, intercept, cut;
} log_params_t;


__DEVICE__ float log2lin(float x, log_params_t params) {
    float tmp = _powf(2.0, x * params.scale + params.y_shift) + params.x_shift;
    if (tmp < params.cut) {
        return tmp * params.slope + params.intercept;
    } else {
        return tmp;
    }
}

__DEVICE__ float lin2log(float x, log_params_t params) {
    float tmp;
    if (x < params.cut) {
        tmp = (x - params.intercept) / params.slope;
    } else {
        tmp = x;
    }
    return (_log2f(tmp - params.x_shift) - params.y_shift) / params.scale;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    log_params_t params;
    params.x_shift = x_shift;
    params.y_shift = y_shift;
    params.scale = scale;
    params.slope = slope;
    params.intercept = intercept;
    params.cut = cut;

    float3 output;
    if (direction == LOG2LIN) {
        output = make_float3(
            gain * log2lin(p_R, params),
            gain * log2lin(p_G, params),
            gain * log2lin(p_B, params)
        );
    } else if (direction == LIN2LOG) {
        output = make_float3(
            lin2log(p_R / gain, params),
            lin2log(p_G / gain, params),
            lin2log(p_B / gain, params)
        );
    }
    return output;
}